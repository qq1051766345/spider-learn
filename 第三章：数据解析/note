数据解析分类：
    ——正则
    ——bs4
    ——xpath

数据解析原理
    ——1。解析的局部文本内容都会在标签之间的或者标签对应的属性中进行存储
    ——2。标签或者标签对应的属性中存储的数据值进行提取

 正则解析
# 使用聚焦爬虫对页面中所有的进行解析和提取
# ex = '<img src="(.*?)" class="photo-result-image"'
# img_src_list = re.findall(ex,page_text,re.S)
# print(img_src_list)

bs4进行数据解析的原理
    - 数据解析的原理
        -1.标签定位
        -2.提取标签，标签属性存储的数据值
    - bs4实现数据解析的原理
        -1.实例化一个BeautiSoup对象，并且将页面源码数据加载在对象中
        -2.通过调用beautifulSoup对象中相关的属性和方法进行标签定位和数据提取

    - 环境的安装
        - pip install bs4
        - pip install lxml
    - 如何实例化BeautiSoup对象
        -from bs4 import BeautifulSoup
        -对象的实例化
            1.本地html加载到该对象
                fp = open('./test.html',encoding='utf-8')
                soup = BeautifulSoup(fp,'lxml')
            2.将互联网上获取的页面源码加载到该对象中
                page_text = response.text
                soup = BeautifulSoup(page_text,'lxml')
        - 提供的用于数据解析的方法和数据
           -soup.tagName 返回的是html中第一次出现的tagName对应的标签
           -soup.find():
                - find('div'):等同于soup.div
                - 属性定位：
                    print(soup.find('div',class_='song'))
           -soup.find_all()
           -select：
                select('某种选择器(id,class,标签)',)返回的是一个列表
           -获取标签之间的文本数据
                - soup.a.text/string/get_text()
                - text/get_text():可以获取某个标签中所有的文本内容
                - string 只能获取该标签下直系的文本内容
           -获取标签中的属性值
                soup.a['src']
xpath解析：最常用且最便捷高效的一种解析方式，通用性。
    - xpath解析原理
        - 1.实例化etree对象，且需要将被解析的页面源码加载到该对象中
        - 2.调用etree对象中的xpath方法结合着xpath表达式实现对标签的定位和内容的捕获
    - 环境的安装
        - pip install lxml
    - 如何实例化一个etree对象:from.lxml import etree
        - 1.可以将本地的html文档数据加载到etree对象中：
            etree.parse(filePath)
        - 2.可以将互联网上获取的源码加载到该对象中
            etree.HTML('page_text')
        - xpath('xpath表达式')
            -/：表示的是从根结点开始定位。表示的是一个层级
            - //：表示的是多个层级。表示从任意位置开始定位
            - 属性定位： //h1[@class="test"] tag[@attrName="attrValue"]
            - 索引定位： /html/body/div/div[1] 索引是从1开始的
            - 取文本：
                - /text():只能拿到直系文本
                - //test(): 拿到标签中所有的非直系文本

            - 取属性：
                - /@attrName










